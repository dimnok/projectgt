import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:projectgt/presentation/widgets/app_bar_widget.dart';
import 'package:projectgt/presentation/widgets/app_drawer.dart'
    show AppRoute, AppDrawer;
import '../widgets/payroll_table_widget.dart';
import '../widgets/payroll_search_action.dart';
import '../widgets/payroll_filter_widget.dart';
import '../providers/payroll_providers.dart';
import '../providers/payroll_filter_providers.dart';
import '../../../../core/di/providers.dart';
import '../../../../presentation/state/employee_state.dart';
import 'tabs/payroll_tab_penalties.dart';
import 'tabs/payroll_tab_bonuses.dart';
import 'tabs/payroll_tab_payouts.dart';

/// –≠–∫—Ä–∞–Ω: –°–ø–∏—Å–æ–∫ —Ä–∞—Å—á—ë—Ç–æ–≤ –§–û–¢ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
class PayrollListScreen extends ConsumerStatefulWidget {
  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ç–∫—Ä–∞–Ω–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ –§–û–¢.
  ///
  /// [key] ‚Äî –∫–ª—é—á –≤–∏–¥–∂–µ—Ç–∞.
  const PayrollListScreen({super.key});

  @override
  ConsumerState<PayrollListScreen> createState() => _PayrollListScreenState();
}

class _PayrollListScreenState extends ConsumerState<PayrollListScreen> {
  bool _initialLoadStarted = false;
  int _selectedTabIndex = 0;

  // –¶–≤–µ—Ç–∞ –¥–ª—è thumb –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–∞
  static const Map<int, Color> _thumbColors = {
    0: Color(0xFFFFFFFF), // –§–û–¢ - –±–µ–ª—ã–π
    1: Color(0xFF64B5F6), // –ü—Ä–µ–º–∏–∏ - –≥–æ–ª—É–±–æ–π (Material Blue 300)
    2: Color(0xFFEF5350), // –®—Ç—Ä–∞—Ñ—ã - –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π (Material Red 400)
    3: Color(0xFF66BB6A), // –í—ã–ø–ª–∞—Ç—ã - –∑–µ–ª–µ–Ω–µ–Ω—å–∫–∏–π (Material Green 400)
  };

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  Map<int, Widget> _buildTabSegments(bool isDark) {
    return {
      0: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Text(
          '–§–û–¢',
          style: TextStyle(
            color: _selectedTabIndex == 0
                ? Colors.black87 // –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º thumb
                : (isDark ? Colors.white70 : Colors.black54),
          ),
        ),
      ),
      1: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Text(
          '–ü—Ä–µ–º–∏–∏',
          style: TextStyle(
            color: _selectedTabIndex == 1
                ? Colors.white // –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –≥–æ–ª—É–±–æ–º thumb
                : (isDark ? Colors.white70 : Colors.black54),
          ),
        ),
      ),
      2: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Text(
          '–®—Ç—Ä–∞—Ñ—ã',
          style: TextStyle(
            color: _selectedTabIndex == 2
                ? Colors.white // –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º thumb
                : (isDark ? Colors.white70 : Colors.black54),
          ),
        ),
      ),
      3: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Text(
          '–í—ã–ø–ª–∞—Ç—ã',
          style: TextStyle(
            color: _selectedTabIndex == 3
                ? Colors.white // –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∑–µ–ª—ë–Ω–æ–º thumb
                : (isDark ? Colors.white70 : Colors.black54),
          ),
        ),
      ),
    };
  }

  static const List<String> monthNames = [
    '—è–Ω–≤–∞—Ä—å',
    '—Ñ–µ–≤—Ä–∞–ª—å',
    '–º–∞—Ä—Ç',
    '–∞–ø—Ä–µ–ª—å',
    '–º–∞–π',
    '–∏—é–Ω—å',
    '–∏—é–ª—å',
    '–∞–≤–≥—É—Å—Ç',
    '—Å–µ–Ω—Ç—è–±—Ä—å',
    '–æ–∫—Ç—è–±—Ä—å',
    '–Ω–æ—è–±—Ä—å',
    '–¥–µ–∫–∞–±—Ä—å'
  ];

  @override
  void initState() {
    super.initState();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
    Future.microtask(() => _initializeData());
  }

  // –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _initializeData() async {
    if (_initialLoadStarted) return;
    _initialLoadStarted = true;

    try {
      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await Future.wait([
        ref.read(employeeProvider.notifier).getEmployees(),
        ref.read(objectProvider.notifier).loadObjects(),
      ]);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä filteredPayrolls
      // (—Ç–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç RPC –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç employees/objects)
      ref.invalidate(filteredPayrollsProvider);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final filterState = ref.watch(payrollFilterProvider);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º filteredPayrollsProvider –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    final payrollsAsync = ref.watch(filteredPayrollsProvider);
    final searchQuery = ref.watch(payrollSearchQueryProvider);

    return Scaffold(
      appBar: AppBarWidget(
        title:
            '–§–û–¢ ‚Äî ${monthNames[filterState.selectedMonth - 1]} ${filterState.selectedYear}',
        actions: const [
          PayrollSearchAction(),
          SizedBox(width: 8),
          PayrollFiltersAction(),
          SizedBox(width: 8),
        ],
      ),
      drawer: const AppDrawer(activeRoute: AppRoute.payrolls),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // --- iOS-—Å—Ç–∏–ª—å —Å –ø–ª–∞–≤–∞—é—â–∏–º —Ü–≤–µ—Ç–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º ---
          Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
            child: CupertinoSlidingSegmentedControl<int>(
              children: _buildTabSegments(theme.brightness == Brightness.dark),
              groupValue: _selectedTabIndex,
              onValueChanged: (int? value) {
                if (value != null) {
                  setState(() {
                    _selectedTabIndex = value;
                  });
                  // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                  final searchQuery = ref.read(payrollSearchQueryProvider);
                  if (searchQuery.trim().isEmpty) {
                    ref.read(payrollSearchVisibleProvider.notifier).state =
                        false;
                  }
                }
              },
              backgroundColor: CupertinoColors.systemGrey6,
              thumbColor: _thumbColors[_selectedTabIndex] ?? Colors.white,
              padding: const EdgeInsets.all(2),
            ),
          ),
          // --- –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ ---
          Expanded(
            child: IndexedStack(
              index: _selectedTabIndex,
              children: [
                // --- –¢–∞–± 0: –§–û–¢ ---
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Card(
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                      side: BorderSide(
                        color: theme.colorScheme.outline.withValues(alpha: 51),
                      ),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: payrollsAsync.when(
                        data: (payrolls) {
                          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                          final filteredPayrolls = filterPayrollsByEmployeeName(
                            payrolls,
                            searchQuery,
                            ref,
                          );
                          return PayrollTableWidget(payrolls: filteredPayrolls);
                        },
                        loading: () => Center(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const CircularProgressIndicator(),
                              const SizedBox(height: 16),
                              Text(
                                '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –§–û–¢...',
                                style: theme.textTheme.bodyMedium,
                              ),
                            ],
                          ),
                        ),
                        error: (e, st) => Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(Icons.error_outline,
                                  size: 48, color: Colors.red),
                              const SizedBox(height: 16),
                              Text(
                                '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
                                style: theme.textTheme.titleMedium
                                    ?.copyWith(color: Colors.red),
                              ),
                              const SizedBox(height: 8),
                              SizedBox(
                                width: 300,
                                child: Text(
                                  e.toString(),
                                  style: theme.textTheme.bodyMedium
                                      ?.copyWith(color: Colors.red),
                                  textAlign: TextAlign.center,
                                ),
                              ),
                              const SizedBox(height: 16),
                              ElevatedButton.icon(
                                icon: const Icon(Icons.refresh),
                                label: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
                                onPressed: () {
                                  ref.invalidate(filteredPayrollsProvider);
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                // --- –¢–∞–± 1: –ü—Ä–µ–º–∏–∏ ---
                const PayrollTabBonuses(),
                // --- –¢–∞–± 2: –®—Ç—Ä–∞—Ñ—ã ---
                const PayrollTabPenalties(),
                // --- –¢–∞–± 3: –í—ã–ø–ª–∞—Ç—ã ---
                const PayrollTabPayouts(),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
