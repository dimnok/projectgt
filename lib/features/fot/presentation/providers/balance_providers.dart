import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:projectgt/core/di/providers.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ –í–°–Å –í–†–ï–ú–Ø
///
/// **–í–ê–ñ–ù–û:** –ë–∞–ª–∞–Ω—Å —É—á–∏—Ç—ã–≤–∞–µ—Ç –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:
/// - –ë–∞–ª–∞–Ω—Å = –°—É–º–º–∞ –≤—Å–µ—Ö "–ö –≤—ã–ø–ª–∞—Ç–µ" –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è - –°—É–º–º–∞ –≤—Å–µ—Ö "–í—ã–ø–ª–∞—Ç—ã" –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
/// - "–ö –≤—ã–ø–ª–∞—Ç–µ" = baseSalary + bonuses + businessTrip - penalties
///
/// **–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:** –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é SQL —Ñ—É–Ω–∫—Ü–∏—é calculate_employee_balances()
/// –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
final employeeAggregatedBalanceProvider =
    FutureProvider<Map<String, double>>((ref) async {
  final client = ref.read(supabaseClientProvider);

  try {
    // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ 5 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
    final response = await client.rpc('calculate_employee_balances');

    final Map<String, double> balance = {};
    for (final row in response) {
      final employeeId = row['employee_id'] as String?;
      final balanceValue = (row['balance'] as num?)?.toDouble() ?? 0;
      if (employeeId != null) {
        balance[employeeId] = balanceValue;
      }
    }

    return balance;
  } catch (e) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return <String, double>{};
  }
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
final cachedEmployeeBalanceProvider =
    FutureProvider.autoDispose<Map<String, double>>((ref) async {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  final timer = Timer(const Duration(minutes: 5), () {
    ref.invalidateSelf();
  });

  ref.onDispose(() => timer.cancel());

  return ref.watch(employeeAggregatedBalanceProvider.future);
});
