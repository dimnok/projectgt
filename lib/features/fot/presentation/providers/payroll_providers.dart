import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/entities/payroll_calculation.dart';
import 'package:projectgt/core/di/providers.dart';
import 'package:collection/collection.dart';
import 'package:projectgt/features/fot/presentation/providers/penalty_providers.dart';
import 'package:projectgt/features/fot/presentation/providers/bonus_providers.dart';
import 'package:projectgt/features/fot/data/models/payroll_payout_model.dart';
import '../../domain/repositories/payroll_payout_repository.dart';
import '../../data/repositories/payroll_payout_repository_impl.dart';
import 'package:projectgt/presentation/state/employee_state.dart';
import 'payroll_filter_providers.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö work_hours –∏ employee_attendance –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.
///
/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ work_hours (—Å–º–µ–Ω—ã) –∏ employee_attendance (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥) –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
/// –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥—É–ª—è —Ç–∞–±–µ–ª—è.
final payrollWorkHoursProvider = FutureProvider<List<dynamic>>((ref) async {
  final filterState = ref.watch(payrollFilterProvider);
  final startDate =
      DateTime(filterState.selectedYear, filterState.selectedMonth, 1);
  final endDate =
      DateTime(filterState.selectedYear, filterState.selectedMonth + 1, 0);

  try {
    final client = ref.watch(supabaseClientProvider);

    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—ã –∏–∑ —Å–º–µ–Ω (work_hours)
    // ‚ö†Ô∏è –í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–º–µ–Ω—ã (status = 'closed')
    final workHoursResponse = await client.from('work_hours').select('''
          id,
          work_id,
          employee_id,
          hours,
          works!inner(
            date,
            object_id,
            status
          )
        ''').eq('works.status', 'closed');

    // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—ã –∏–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (employee_attendance)
    final attendanceResponse = await client
        .from('employee_attendance')
        .select('id, employee_id, object_id, date, hours')
        .gte('date', startDate.toIso8601String())
        .lte('date', endDate.toIso8601String());

    // 3Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º work_hours –≤ WorkHourEntry –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    final workHoursEntries = workHoursResponse
        .map<dynamic>((record) {
          final works = record['works'] as Map<String, dynamic>?;

          if (works == null ||
              record['employee_id'] == null ||
              record['hours'] == null ||
              works['date'] == null) {
            return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏
          }

          final workDate = DateTime.parse(works['date']);
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
          if (workDate.isBefore(startDate) || workDate.isAfter(endDate)) {
            return null;
          }

          return WorkHourEntry(
            id: record['id'],
            workId: record['work_id'],
            employeeId: record['employee_id'],
            hours: record['hours'],
            date: workDate,
            objectId: works['object_id'] ?? '',
            employeePosition: null,
          );
        })
        .where((entry) => entry != null)
        .toList();

    // 4Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º employee_attendance –≤ WorkHourEntry
    final attendanceEntries = attendanceResponse
        .map<dynamic>((record) {
          if (record['employee_id'] == null ||
              record['hours'] == null ||
              record['date'] == null) {
            return null;
          }

          return WorkHourEntry(
            id: record['id'],
            workId: '', // –ù–µ—Ç work_id –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            employeeId: record['employee_id'],
            hours: record['hours'],
            date: DateTime.parse(record['date']),
            objectId: record['object_id'] ?? '',
            employeePosition: null,
          );
        })
        .where((entry) => entry != null)
        .toList();

    // 5Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
    return [...workHoursEntries, ...attendanceEntries];
  } catch (e) {
    return [];
  }
});

/// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–º–µ–Ω—ã.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase.
class WorkHourEntry {
  /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ work_hours (UUID).
  final String id;

  /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω—ã (work_id), –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø–∏—Å—å (UUID).
  final String workId;

  /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (employee_id), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —á–∞—Å—ã (UUID).
  final String employeeId;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
  final num hours;

  /// –î–∞—Ç–∞ —Å–º–µ–Ω—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø–∏—Å—å (–ø–æ–ª–µ works.date).
  final DateTime date;

  /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (object_id), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–µ–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞ (UUID).
  final String objectId;

  /// –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–º–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å null).
  final String? employeePosition;

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä WorkHourEntry.
  ///
  /// [id] ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ work_hours.
  /// [workId] ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω—ã.
  /// [employeeId] ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
  /// [hours] ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤.
  /// [date] ‚Äî –¥–∞—Ç–∞ —Å–º–µ–Ω—ã.
  /// [objectId] ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞.
  /// [employeePosition] ‚Äî –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
  WorkHourEntry({
    required this.id,
    required this.workId,
    required this.employeeId,
    required this.hours,
    required this.date,
    required this.objectId,
    this.employeePosition,
  });
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–û–¢.
///
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∫–æ–≥–¥–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é.
final payrollDataReadyProvider = Provider<bool>((ref) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö work_hours –¥–ª—è –§–û–¢
  final workHoursState = ref.watch(payrollWorkHoursProvider);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ employees
  final employeeState = ref.watch(employeeProvider);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
  final workHoursLoaded = !workHoursState.isLoading && workHoursState.hasValue;
  final employeesLoaded = employeeState.employees.isNotEmpty;

  // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  return workHoursLoaded && employeesLoaded;
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞—Å—á–µ—Ç–æ–≤ –§–û–¢ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.
///
/// HYBRID –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–∞—Ç—á-—Ä–∞—Å—á—ë—Ç–∞.
/// –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç (fallback).
final filteredPayrollsProvider =
    FutureProvider<List<PayrollCalculation>>((ref) async {
  final filterState = ref.watch(payrollFilterProvider);
  final year = filterState.selectedYear;
  final month = filterState.selectedMonth;

  try {
    // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–∞—Ç—á-—Ä–∞—Å—á—ë—Ç–∞
    final client = ref.watch(supabaseClientProvider);
    final response = await client.rpc('calculate_payroll_for_month', params: {
      'p_year': year,
      'p_month': month,
    });

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ PayrollCalculation
    final List<PayrollCalculation> payrolls = [];
    for (final row in response) {
      payrolls.add(PayrollCalculation(
        employeeId: row['employee_id'] as String,
        periodMonth: DateTime(year, month, 1),
        hoursWorked: (row['total_hours'] as num).toDouble(),
        hourlyRate: (row['current_hourly_rate'] as num).toDouble(),
        baseSalary: (row['base_salary'] as num).toDouble(),
        bonusesTotal: (row['bonuses_total'] as num).toDouble(),
        penaltiesTotal: (row['penalties_total'] as num).toDouble(),
        businessTripTotal: (row['business_trip_total'] as num).toDouble(),
        netSalary: (row['net_salary'] as num).toDouble(),
      ));
    }

    return payrolls;
  } catch (e) {
    // üîÑ FALLBACK: –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    return _calculatePayrollClientSide(ref, year, month);
  }
});

/// Fallback-—Ñ—É–Ω–∫—Ü–∏—è: –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –§–û–¢ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞).
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ PostgreSQL —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
Future<List<PayrollCalculation>> _calculatePayrollClientSide(
  Ref ref,
  int year,
  int month,
) async {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ watch –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  final workHoursAsync = ref.watch(payrollWorkHoursProvider);
  final employeeState = ref.watch(employeeProvider);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
  if (!workHoursAsync.hasValue || employeeState.employees.isEmpty) {
    return [];
  }

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ work_hours
    final workHours = workHoursAsync.value!;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    final Map<String, List<dynamic>> employeeEntries = {};
    for (final entry in workHours) {
      employeeEntries.putIfAbsent(entry.employeeId, () => []).add(entry);
    }

    final filteredEmployeeIds = employeeEntries.keys.toList();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã –∏ –ø—Ä–µ–º–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    final penaltiesAsyncRaw = await ref.watch(allPenaltiesProvider.future);
    final bonusesAsyncRaw = await ref.watch(allBonusesProvider.future);
    final penaltiesAsync = penaltiesAsyncRaw;
    final bonusesAsync = bonusesAsyncRaw;

    // –§–æ—Ä–º–∏—Ä—É–µ–º PayrollCalculation –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    final List<PayrollCalculation> payrolls = [];

    // –ü–æ–ª—É—á–∞–µ–º use case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
    final getRateUseCase = ref.read(getEmployeeRateForDateUseCaseProvider);

    for (final employeeId in filteredEmployeeIds) {
      final entries = employeeEntries[employeeId]!;
      double hours = 0;
      double baseSalary = 0;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–≤–æ–∫
      for (final entry in entries) {
        if (entry.hours != null) {
          final entryHours =
              (entry.hours is num) ? entry.hours.toDouble() : 0.0;
          hours += entryHours;

          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ –¥–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã
          final rateForDate = await getRateUseCase(employeeId, entry.date);
          baseSalary += entryHours * rateForDate;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Å—É—Ç–æ—á–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–∞—Ç—ã —Å–º–µ–Ω—ã
      // —Å —É—á—ë—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
      double businessTripTotal = 0;
      final tripRateDataSource = ref.read(businessTripRateDataSourceProvider);

      for (final entry in entries) {
        final objectId = entry.objectId;
        if (objectId != null && objectId.isNotEmpty) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å —É—á—ë—Ç–æ–º employee_id –∏ hours
            final rate =
                await tripRateDataSource.getActiveRateForEmployeeAndDate(
              employeeId,
              objectId,
              entry.date,
              entry.hours,
            );
            if (rate != null) {
              businessTripTotal += rate.rate;
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
          }
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –∏–∑ employee_rates
      final currentRateAsync = await ref
          .read(employeeRateDataSourceProvider)
          .getCurrentRate(employeeId);
      final currentHourlyRate = currentRateAsync?.hourlyRate ?? 0.0;

      // –†–∞—Å—á—ë—Ç —à—Ç—Ä–∞—Ñ–æ–≤ –∏–∑ –±–∞–∑—ã
      final penaltiesTotal = (penaltiesAsync)
          .where((p) =>
              p.employeeId == employeeId &&
              p.date != null &&
              p.date!.year == year &&
              p.date!.month == month)
          .fold<double>(0, (sum, p) => sum + p.amount);

      // –†–∞—Å—á—ë—Ç –ø—Ä–µ–º–∏–π –∏–∑ –±–∞–∑—ã
      final bonusesTotal = (bonusesAsync)
          .where((b) =>
              b.employeeId == employeeId &&
              ((b.date != null &&
                      b.date!.year == year &&
                      b.date!.month == month) ||
                  (b.date == null &&
                      b.createdAt != null &&
                      b.createdAt!.year == year &&
                      b.createdAt!.month == month)))
          .fold<double>(0, (sum, b) => sum + b.amount);

      final grossSalary =
          baseSalary + bonusesTotal + businessTripTotal - penaltiesTotal;
      final netSalary = grossSalary;

      final calculation = PayrollCalculation(
        employeeId: employeeId,
        periodMonth: DateTime(year, month, 1),
        hoursWorked: hours,
        hourlyRate: currentHourlyRate,
        baseSalary: baseSalary,
        bonusesTotal: bonusesTotal,
        penaltiesTotal: penaltiesTotal,
        businessTripTotal: businessTripTotal,
        netSalary: netSalary,
      );

      payrolls.add(calculation);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    final employeeState = ref.watch(employeeProvider);
    final employees = employeeState.employees;

    payrolls.sort((a, b) {
      final empA = employees.firstWhereOrNull((e) => e.id == a.employeeId);
      final empB = employees.firstWhereOrNull((e) => e.id == b.employeeId);
      final nameA = empA != null
          ? ('${empA.lastName} ${empA.firstName} ${empA.middleName ?? ''}')
              .trim()
              .toLowerCase()
          : '';
      final nameB = empB != null
          ? ('${empB.lastName} ${empB.firstName} ${empB.middleName ?? ''}')
              .trim()
              .toLowerCase()
          : '';
      return nameA.compareTo(nameB);
    });

    return payrolls;
  } catch (e) {
    return [];
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.
final payrollPayoutsByMonthProvider =
    FutureProvider<List<PayrollPayoutModel>>((ref) async {
  final client = ref.watch(supabaseClientProvider);
  final filterState = ref.watch(payrollFilterProvider);
  final startDate =
      DateTime(filterState.selectedYear, filterState.selectedMonth, 1);
  final endDate =
      DateTime(filterState.selectedYear, filterState.selectedMonth + 1, 0);

  final response = await client
      .from('payroll_payout')
      .select()
      .gte('payout_date', startDate.toIso8601String())
      .lte('payout_date', endDate.toIso8601String());

  return (response as List)
      .map((json) => PayrollPayoutModel.fromJson(json as Map<String, dynamic>))
      .toList();
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç –ø–æ –§–û–¢ (Supabase).
final payrollPayoutRepositoryProvider =
    Provider<PayrollPayoutRepository>((ref) {
  final client = ref.watch(supabaseClientProvider);
  return PayrollPayoutRepositoryImpl(client);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
/// @returns Future<PayrollPayoutModel> Function(PayrollPayoutModel) ‚Äî —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.
final createPayoutUseCaseProvider =
    Provider<Future<PayrollPayoutModel> Function(PayrollPayoutModel)>((ref) {
  final repo = ref.watch(payrollPayoutRepositoryProvider);
  return (PayrollPayoutModel payout) async {
    return await repo.createPayout(payout);
  };
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
/// @returns Future<PayrollPayoutModel> Function(PayrollPayoutModel) ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.
final updatePayoutUseCaseProvider =
    Provider<Future<PayrollPayoutModel> Function(PayrollPayoutModel)>((ref) {
  final repo = ref.watch(payrollPayoutRepositoryProvider);
  return (PayrollPayoutModel payout) async {
    return await repo.updatePayout(payout);
  };
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –ø–æ ID.
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
/// @returns Future<void> Function(String) ‚Äî —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –ø–æ ID.
final deletePayoutUseCaseProvider =
    Provider<Future<void> Function(String)>((ref) {
  final repo = ref.watch(payrollPayoutRepositoryProvider);
  return (String id) async {
    await repo.deletePayout(id);
  };
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
final filteredPayrollPayoutsProvider =
    FutureProvider<List<PayrollPayoutModel>>((ref) async {
  try {
    final payouts = await ref.watch(payrollPayoutsByMonthProvider.future);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    final employeeState = ref.watch(employeeProvider);
    final employees = employeeState.employees;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    final sortedPayouts = List<PayrollPayoutModel>.from(payouts);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
    sortedPayouts.sort((a, b) {
      final empA = employees.firstWhereOrNull((e) => e.id == a.employeeId);
      final empB = employees.firstWhereOrNull((e) => e.id == b.employeeId);
      final nameA = empA != null
          ? ('${empA.lastName} ${empA.firstName} ${empA.middleName ?? ''}')
              .trim()
              .toLowerCase()
          : a.employeeId.toLowerCase();
      final nameB = empB != null
          ? ('${empB.lastName} ${empB.firstName} ${empB.middleName ?? ''}')
              .trim()
              .toLowerCase()
          : b.employeeId.toLowerCase();
      return nameA.compareTo(nameB);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤—ã–ø–ª–∞—Ç—ã (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    sortedPayouts.sort((a, b) => b.payoutDate.compareTo(a.payoutDate));

    return sortedPayouts;
  } catch (e) {
    return [];
  }
});
