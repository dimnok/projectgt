import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/entities/work_item.dart';
import '../providers/work_items_provider.dart';
import '../../../../core/di/providers.dart';
import '../../../../domain/entities/estimate.dart';
import 'package:uuid/uuid.dart';
import '../providers/work_provider.dart';
import 'package:intl/intl.dart';
import 'package:flutter_typeahead/flutter_typeahead.dart';
import 'dart:developer' as developer;

/// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (WorkItem).
///
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–æ–∫, —ç—Ç–∞–∂, —Å–∏—Å—Ç–µ–º—É, –ø–æ–¥—Å–∏—Å—Ç–µ–º—É –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Riverpod –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç.
class WorkItemFormModal extends ConsumerStatefulWidget {
  /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞.
  final String workId;
  /// –ò—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (null ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π).
  final WorkItem? initial;
  /// –°–æ–∑–¥–∞—ë—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
  const WorkItemFormModal({super.key, required this.workId, this.initial});

  @override
  ConsumerState<WorkItemFormModal> createState() => _WorkItemFormModalState();
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è [WorkItemFormModal].
///
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–º–µ—Ç, –≤—ã–±–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º –∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.
class _WorkItemFormModalState extends ConsumerState<WorkItemFormModal> {
  /// –ö–ª—é—á —Ñ–æ—Ä–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
  final _formKey = GlobalKey<FormState>();
  
  /// –í—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ (–º–æ–¥—É–ª—å).
  String? _selectedSection;
  /// –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–∂.
  String? _selectedFloor;
  /// –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
  String? _selectedSystem;
  /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞.
  String? _selectedSubsystem;
  
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—è "–°–∏—Å—Ç–µ–º–∞".
  final TextEditingController _systemController = TextEditingController();
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—è "–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞".
  final TextEditingController _subsystemController = TextEditingController();
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—è "–£—á–∞—Å—Ç–æ–∫".
  final TextEditingController _sectionController = TextEditingController();
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—è "–≠—Ç–∞–∂".
  final TextEditingController _floorController = TextEditingController();
  
  /// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
  List<Estimate> _filteredEstimates = [];
  
  /// –ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
  final Map<Estimate, double?> _selectedEstimateItems = {};
  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç–µ.
  final Map<Estimate, TextEditingController> _quantityControllers = {};
  
  /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ).
  late String objectId;
  
  /// –¢–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–∞–º.
  String _searchQuery = '';
  
  /// –ü—Ä–∏–∑–Ω–∞–∫ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (true ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, false ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ).
  bool get isModifying => widget.initial != null;
  
  @override
  void initState() {
    super.initState();
    final work = ref.read(workProvider(widget.workId));
    objectId = work?.objectId ?? '';
    if (objectId.isEmpty) {
      throw Exception('objectId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–º–µ–Ω—ã');
    }
    if (isModifying) {
      _selectedSection = widget.initial!.section;
      _selectedFloor = widget.initial!.floor;
      _selectedSystem = widget.initial!.system;
      _selectedSubsystem = widget.initial!.subsystem;
      _sectionController.text = _selectedSection ?? '';
      _floorController.text = _selectedFloor ?? '';
      _systemController.text = _selectedSystem ?? '';
      _subsystemController.text = _selectedSubsystem ?? '';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—ã, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    Future.microtask(() {
      if (ref.read(estimateNotifierProvider).estimates.isEmpty) {
        ref.read(estimateNotifierProvider.notifier).loadEstimates();
      }
    });
  }
  
  @override
  void dispose() {
    for (final controller in _quantityControllers.values) {
      controller.dispose();
    }
    _systemController.dispose();
    _subsystemController.dispose();
    _sectionController.dispose();
    _floorController.dispose();
    super.dispose();
  }
  
  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º (—Å–∏—Å—Ç–µ–º–∞, –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞, –æ–±—ä–µ–∫—Ç).
  void _updateFilteredEstimates() {
    final allEstimates = ref.read(estimateNotifierProvider).estimates;
    final filteredList = allEstimates.where((estimate) {
      if (estimate.objectId != objectId) return false;
      if (_selectedSystem != null && _selectedSystem!.isNotEmpty && estimate.system != _selectedSystem) return false;
      if (_selectedSubsystem != null && _selectedSubsystem!.isNotEmpty && estimate.subsystem != _selectedSubsystem) return false;
      return true;
    }).toList();
    
    setState(() {
      _filteredEstimates = filteredList;
    });
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ (–º–æ–¥—É–ª–µ–π) –∏–∑ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç.
  Future<List<String>> _getAvailableSections() async {
    final workItemsNotifier = ref.read(workItemsNotifierProvider);
    final items = await workItemsNotifier.getAllWorkItems();
    return items.map((e) => e.section).where((e) => e.isNotEmpty).toSet().toList();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–∂–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞.
  Future<List<String>> _getAvailableFloors() async {
    final workItemsNotifier = ref.read(workItemsNotifierProvider);
    final items = await workItemsNotifier.getAllWorkItems();
    
    if (_selectedSection != null && _selectedSection!.isNotEmpty) {
      return items
          .where((e) => e.section == _selectedSection)
          .map((e) => e.floor)
          .where((e) => e.isNotEmpty)
          .toSet()
          .toList();
    }
    return items.map((e) => e.floor).where((e) => e.isNotEmpty).toSet().toList();
  }
  
  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
  /// –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É.
  Future<void> _saveSelectedItems() async {
    if (_selectedEstimateItems.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É –∏–∑ —Å–º–µ—Ç—ã'))
      );
      return;
    }
    
    final workItemsNotifier = ref.read(workItemsProvider(widget.workId).notifier);
    
    for (final entry in _selectedEstimateItems.entries) {
      final estimate = entry.key;
      final quantity = entry.value ?? 0.0;
      
      final workItem = WorkItem(
        id: const Uuid().v4(),
        workId: widget.workId,
        section: _selectedSection ?? '',
        floor: _selectedFloor ?? '',
        estimateId: estimate.id,
        name: estimate.name,
        system: estimate.system,
        subsystem: estimate.subsystem,
        unit: estimate.unit,
        quantity: quantity,
        price: estimate.price,
        total: estimate.price * quantity,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      developer.log('DEBUG: workItem.toJson() = [38;5;2m${workItem.toJson()}[0m', name: 'work_item_form_modal');
      await workItemsNotifier.add(workItem);
    }
    
    if (mounted) Navigator.pop(context);
  }
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isSectionFilled = _selectedSection != null && _selectedSection!.isNotEmpty;
    final isFloorFilled = _selectedFloor != null && _selectedFloor!.isNotEmpty;
    final isSystemFilled = _selectedSystem != null && _selectedSystem!.isNotEmpty;
    final isSubsystemFilled = _selectedSubsystem != null && _selectedSubsystem!.isNotEmpty;
    
    return Center(
      child: ConstrainedBox(
        constraints: const BoxConstraints(maxWidth: 700),
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 16.0),
                child: Row(
                  children: [
                    Expanded(
                      child: Text(
                        widget.initial == null ? '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É',
                        style: theme.textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.close),
                      style: IconButton.styleFrom(foregroundColor: Colors.red),
                      onPressed: () => Navigator.pop(context),
                    ),
                  ],
                ),
              ),
              const Divider(),
              // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
              Card(
                margin: EdgeInsets.zero,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                  side: BorderSide(
                    color: theme.colorScheme.outline.withValues(alpha: 51),
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ', style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 16),
                        // –£—á–∞—Å—Ç–æ–∫ (–º–æ–¥—É–ª—å) - TypeAheadField
                        TypeAheadField<String>(
                          controller: _sectionController,
                          suggestionsCallback: (pattern) {
                            return _getAvailableSections()
                                .then((sections) => sections.where((section) => section.toLowerCase().contains(pattern.toLowerCase())).toList());
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSelected: (suggestion) {
                            setState(() {
                              _selectedSection = suggestion;
                              _sectionController.text = suggestion;
                            });
                          },
                          builder: (context, controller, focusNode) {
                            return TextFormField(
                              controller: controller,
                              focusNode: focusNode,
                              decoration: InputDecoration(
                                labelText: '–£—á–∞—Å—Ç–æ–∫',
                                border: const OutlineInputBorder(),
                                prefixIcon: const Icon(Icons.location_on),
                                suffixIcon: controller.text.isNotEmpty
                                    ? IconButton(
                                        icon: const Icon(Icons.clear),
                                        tooltip: '–û—á–∏—Å—Ç–∏—Ç—å',
                                        onPressed: () {
                                          setState(() {
                                            _selectedSection = null;
                                            controller.clear();
                                            _selectedFloor = null;
                                            _floorController.clear();
                                            _selectedSystem = null;
                                            _systemController.clear();
                                            _selectedSubsystem = null;
                                            _subsystemController.clear();
                                            _selectedEstimateItems.clear();
                                          });
                                        },
                                      )
                                    : null,
                              ),
                              readOnly: false,
                              onChanged: (value) {
                                setState(() {
                                  _selectedSection = value;
                                  if (value.isEmpty) {
                                    _selectedFloor = null;
                                    _selectedSystem = null;
                                    _selectedSubsystem = null;
                                    _selectedEstimateItems.clear();
                                  }
                                });
                              },
                              validator: (value) => value == null || value.isEmpty ? '–£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫' : null,
                            );
                          },
                          hideOnEmpty: false,
                          emptyBuilder: (context) => const ListTile(
                            title: Text('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'),
                          ),
                        ),
                        const SizedBox(height: 16),
                        // –≠—Ç–∞–∂ - TypeAheadField
                        TypeAheadField<String>(
                          controller: _floorController,
                          suggestionsCallback: (pattern) {
                            if (!isSectionFilled) return [];
                            return _getAvailableFloors()
                                .then((floors) => floors.where((floor) => floor.toLowerCase().contains(pattern.toLowerCase())).toList());
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSelected: (suggestion) {
                            setState(() {
                              _selectedFloor = suggestion;
                              _floorController.text = suggestion;
                            });
                          },
                          builder: (context, controller, focusNode) {
                            return TextFormField(
                              controller: controller,
                              focusNode: focusNode,
                              decoration: InputDecoration(
                                labelText: '–≠—Ç–∞–∂',
                                border: const OutlineInputBorder(),
                                prefixIcon: const Icon(Icons.stairs),
                                suffixIcon: controller.text.isNotEmpty
                                    ? IconButton(
                                        icon: const Icon(Icons.clear),
                                        tooltip: '–û—á–∏—Å—Ç–∏—Ç—å',
                                        onPressed: () {
                                          setState(() {
                                            _selectedFloor = null;
                                            controller.clear();
                                            _selectedSystem = null;
                                            _systemController.clear();
                                            _selectedSubsystem = null;
                                            _subsystemController.clear();
                                            _selectedEstimateItems.clear();
                                          });
                                        },
                                      )
                                    : null,
                              ),
                              readOnly: false,
                              enabled: isSectionFilled,
                              onChanged: (value) {
                                setState(() {
                                  _selectedFloor = value;
                                  if (value.isEmpty) {
                                    _selectedSystem = null;
                                    _selectedSubsystem = null;
                                    _selectedEstimateItems.clear();
                                  }
                                });
                              },
                              validator: (value) => value == null || value.isEmpty ? '–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂' : null,
                            );
                          },
                          hideOnEmpty: false,
                          emptyBuilder: (context) => const ListTile(
                            title: Text('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'),
                          ),
                        ),
                        const SizedBox(height: 16),
                        // –°–∏—Å—Ç–µ–º–∞ - TypeAheadField
                        TypeAheadField<String>(
                          controller: _systemController,
                          suggestionsCallback: (pattern) {
                            if (!isFloorFilled) return Future.value(<String>[]);
                            final estimates = ref.read(estimateNotifierProvider).estimates;
                            final systems = estimates
                                .where((e) => e.objectId == objectId)
                                .map((e) => e.system)
                                .toSet()
                                .toList()
                                .where((system) => system.toLowerCase().contains(pattern.toLowerCase()))
                                .toList();
                            return Future.value(systems);
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSelected: (suggestion) {
                            setState(() {
                              _selectedSystem = suggestion;
                              _systemController.text = suggestion;
                              _selectedSubsystem = null;
                              _subsystemController.clear();
                              _selectedEstimateItems.clear();
                            });
                            _updateFilteredEstimates();
                          },
                          builder: (context, controller, focusNode) {
                            return TextFormField(
                              controller: controller,
                              focusNode: focusNode,
                              decoration: InputDecoration(
                                labelText: '–°–∏—Å—Ç–µ–º–∞',
                                border: const OutlineInputBorder(),
                                prefixIcon: const Icon(Icons.category),
                                suffixIcon: controller.text.isNotEmpty
                                    ? IconButton(
                                        icon: const Icon(Icons.clear),
                                        tooltip: '–û—á–∏—Å—Ç–∏—Ç—å',
                                        onPressed: () {
                                          setState(() {
                                            _selectedSystem = null;
                                            controller.clear();
                                            _selectedSubsystem = null;
                                            _subsystemController.clear();
                                            _selectedEstimateItems.clear();
                                          });
                                        },
                                      )
                                    : null,
                              ),
                              readOnly: false,
                              enabled: isFloorFilled,
                              validator: (value) => value == null || value.isEmpty ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É' : null,
                            );
                          },
                          hideOnEmpty: false,
                          emptyBuilder: (context) => const ListTile(
                            title: Text('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'),
                          ),
                        ),
                        const SizedBox(height: 16),
                        // –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ - TypeAheadField
                        TypeAheadField<String>(
                          controller: _subsystemController,
                          suggestionsCallback: (pattern) {
                            if (!isSystemFilled) return Future.value(<String>[]);
                            final estimates = ref.read(estimateNotifierProvider).estimates;
                            final subsystems = estimates
                                .where((e) => e.objectId == objectId && e.system == _selectedSystem)
                                .map((e) => e.subsystem)
                                .toSet()
                                .toList()
                                .where((subsystem) => subsystem.toLowerCase().contains(pattern.toLowerCase()))
                                .toList();
                            return Future.value(subsystems);
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSelected: (suggestion) {
                            setState(() {
                              _selectedSubsystem = suggestion;
                              _subsystemController.text = suggestion;
                              _selectedEstimateItems.clear();
                            });
                            _updateFilteredEstimates();
                          },
                          builder: (context, controller, focusNode) {
                            return TextFormField(
                              controller: controller,
                              focusNode: focusNode,
                              decoration: InputDecoration(
                                labelText: '–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞',
                                border: const OutlineInputBorder(),
                                prefixIcon: const Icon(Icons.dns),
                                suffixIcon: controller.text.isNotEmpty
                                    ? IconButton(
                                        icon: const Icon(Icons.clear),
                                        tooltip: '–û—á–∏—Å—Ç–∏—Ç—å',
                                        onPressed: () {
                                          setState(() {
                                            _selectedSubsystem = null;
                                            controller.clear();
                                            _selectedEstimateItems.clear();
                                          });
                                        },
                                      )
                                    : null,
                              ),
                              readOnly: false,
                              enabled: isSystemFilled,
                              validator: (value) => value == null || value.isEmpty ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—É' : null,
                            );
                          },
                          hideOnEmpty: false,
                          emptyBuilder: (context) => const ListTile(
                            title: Text('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'),
                          ),
                        ),
                        const SizedBox(height: 16),
                        const SizedBox(height: 20),
                        // –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã
                        if (isSubsystemFilled) _buildEstimateItemsList(),
                      ],
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 24),
              // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () => Navigator.pop(context),
                      style: OutlinedButton.styleFrom(
                        minimumSize: const Size.fromHeight(44),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                      ),
                      child: const Text('–û—Ç–º–µ–Ω–∞'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: _selectedEstimateItems.isEmpty ? null : _saveSelectedItems,
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size.fromHeight(44),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                      ),
                      child: const Text('–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 32),
            ],
          ),
        ),
      ),
    );
  }
  
  /// –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–∞–±–æ—Ç, –ø–æ–ª–µ–º –ø–æ–∏—Å–∫–∞ –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π.
  Widget _buildEstimateItemsList() {
    final numberFormat = NumberFormat('#,##0.00', 'ru_RU');
    final filteredBySearch = _searchQuery.isEmpty
      ? _filteredEstimates
      : _filteredEstimates.where((e) => e.name.toLowerCase().contains(_searchQuery.toLowerCase())).toList();
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          '–†–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã:',
          style: Theme.of(context).textTheme.titleMedium,
        ),
        // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        Padding(
          padding: const EdgeInsets.only(top: 8, bottom: 12),
          child: TextField(
            decoration: const InputDecoration(
              prefixIcon: Icon(Icons.search),
              hintText: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é',
              border: OutlineInputBorder(),
              isDense: true,
            ),
            onChanged: (value) {
              setState(() {
                _searchQuery = value;
              });
            },
          ),
        ),
        const SizedBox(height: 8),
        if (filteredBySearch.isEmpty) ...[
          const Padding(
            padding: EdgeInsets.all(16.0),
            child: Center(
              child: Text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã'),
            ),
          ),
        ]
        else ...[
          Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surfaceContainerHighest,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                const SizedBox(width: 32),
                Expanded(
                  flex: 3,
                  child: Text(
                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                    style: Theme.of(context).textTheme.titleSmall,
                  ),
                ),
                Expanded(
                  child: Text(
                    '–ï–¥.–∏–∑–º.',
                    style: Theme.of(context).textTheme.titleSmall,
                    textAlign: TextAlign.center,
                  ),
                ),
                Expanded(
                  child: Text(
                    '–¶–µ–Ω–∞',
                    style: Theme.of(context).textTheme.titleSmall,
                    textAlign: TextAlign.center,
                  ),
                ),
                Expanded(
                  child: Text(
                    '–ö–æ–ª-–≤–æ',
                    style: Theme.of(context).textTheme.titleSmall,
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
          Container(
            decoration: BoxDecoration(
              border: Border.all(color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2)),
              borderRadius: const BorderRadius.only(
                bottomLeft: Radius.circular(8),
                bottomRight: Radius.circular(8),
              ),
            ),
            constraints: const BoxConstraints(maxHeight: 300),
            child: filteredBySearch.isEmpty
              ? const Center(child: Padding(
                  padding: EdgeInsets.all(24),
                  child: Text('–ù–µ—Ç —Ä–∞–±–æ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É'),
                ))
              : ListView.builder(
                  shrinkWrap: true,
                  itemCount: filteredBySearch.length,
                  itemBuilder: (context, index) {
                    final estimate = filteredBySearch[index];
                    final isSelected = _selectedEstimateItems.containsKey(estimate);
                    final quantity = _selectedEstimateItems[estimate];
                    final controller = _quantityControllers.putIfAbsent(
                      estimate,
                      () => TextEditingController(
                        text: quantity != null && quantity > 0
                          ? (quantity % 1 == 0 ? quantity.toInt().toString() : quantity.toString())
                          : '',
                      ),
                    );
                    if (isSelected) {
                      final newText = quantity != null && quantity > 0
                        ? (quantity % 1 == 0 ? quantity.toInt().toString() : quantity.toString())
                        : '';
                      if (controller.text != newText) {
                        controller.text = newText;
                        controller.selection = TextSelection.fromPosition(
                          TextPosition(offset: controller.text.length),
                        );
                      }
                    }
                    return Row(
                      children: [
                        Checkbox(
                          value: isSelected,
                          onChanged: (value) {
                            setState(() {
                              if (value == true) {
                                _selectedEstimateItems[estimate] = null;
                                _quantityControllers.putIfAbsent(
                                  estimate,
                                  () => TextEditingController(),
                                );
                              } else {
                                _selectedEstimateItems.remove(estimate);
                                _quantityControllers[estimate]?.dispose();
                                _quantityControllers.remove(estimate);
                              }
                            });
                          },
                        ),
                        Expanded(
                          flex: 3,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 8.0),
                            child: Text(estimate.name),
                          ),
                        ),
                        Expanded(
                          child: Text(
                            estimate.unit,
                            textAlign: TextAlign.center,
                          ),
                        ),
                        Expanded(
                          child: Text(
                            numberFormat.format(estimate.price),
                            textAlign: TextAlign.center,
                          ),
                        ),
                        Expanded(
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                            child: TextField(
                              controller: controller,
                              decoration: const InputDecoration(
                                isDense: true,
                                contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                                border: OutlineInputBorder(),
                              ),
                              keyboardType: TextInputType.text,
                              textAlign: TextAlign.center,
                              enabled: isSelected,
                              onChanged: (value) {
                                final qty = double.tryParse(value);
                                setState(() {
                                  if (isSelected) {
                                    if (qty != null && qty > 0) {
                                      _selectedEstimateItems[estimate] = qty;
                                    } else {
                                      _selectedEstimateItems[estimate] = null;
                                    }
                                  }
                                });
                              },
                            ),
                          ),
                        ),
                      ],
                    );
                  },
                ),
          ),
        ],
        if (_selectedEstimateItems.isNotEmpty) ...[
          const SizedBox(height: 16),
          Text(
            '–í—ã–±—Ä–∞–Ω–æ —Ä–∞–±–æ—Ç: ${_selectedEstimateItems.length}',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            '–°—É–º–º–∞ —Ä–∞–±–æ—Ç: ${numberFormat.format(
                _selectedEstimateItems.entries
                  .where((e) => e.value != null && e.value! > 0)
                  .fold<double>(0, (sum, e) => sum + e.key.price * e.value!)
              )} ‚ÇΩ',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ],
    );
  }
} 